05/02/2025							Continuous Integration
----------					             -----------------------------
Importance:
----------
->Improves Quality: Improves the quality by running multiple unit tests and analysing various static code.
  ---------------- 
->Increases Productivity: Automating build of code saves a lot of time, thereby increasing productivity.
  ----------------------
->Reduce Risk: Eliminates the risk of potential human errors by automating test.
  -----------

Introduction to Jenkins:
-----------------------
Features of Jenkins:
-------------------
->Easy Installation process
->Upgrades are easily available
->Provides advance security
->Lightweight container support
->Optimized performance
->Distributed Team Management

-> What is Continuous Integration:-
  ------------------------------
 ->It is the process of automating the building and testing of code, each time one of the team member commits changes to version control.

				commit		     Initiate CI process
		         |---------------->Source code-----------------|
			 |					       |
			 |					       |
		    Development					      Build	
			 |					       |
			 |					       |
			 |-----------------Testing---------------------|
				Report			Test


->CI- Continuous Integration
->CD- Continuous Delivery (release) & Continuous Deployment as well

Popular Continuous Integration Tools:
------------------------------------
-> Gitlab CI
-> Jenkins
-> Codeship
-> Teamcity
-> Bamboo
-> Travis CI

-> From AWS Cloud, if we watched to perform CI & CD, there are various services like codecommit, code deploy, codeguru, codebuild, and codepipeline.

-> From Azure cloud, we have Azure devops, Azure boards, Azure repos, Azure pipelines, Azure Test plans and Azure artifacts.



->What is Jenkins?
  ----------------
  -> A continuous Integration server which manages and control processes such as plan, code, build, test, deploy, operate and monitor in DevOps Environment.
    ->Plan  ->Code  ->Build  ->Test  ->Deploy   ->Operate   ->Monitor

->Continuous integration is also known as "Automation Server"

->Why Jenkins is So popular:-
  -------------------------
->Open Source
->Good plug-in support
->Good community support
->Fast and Reliable
->Good OS Support
->Scripted Builds

Topics:-
------
->Following are the topics will be covered in this module:-
  -------------------------------------------------------
-> Jenkins Architecture
-> Plug-in Management in Jenkins
-> Jenkins Security Management
-> Notifications in Jenkins
-> Jenkins Master Slave Architecture
-> Jenkins Delivery Pipeline
-> Jenkins Declarative Pipeline

Jenkins Architecture:
---------------------
Git--->Jenkins
	  |											 |----> Test Environment
	  |											 |
	  |											 |
	  |										         |----->Release Environment
Build + Unit Test --> Function Test ---> Deploy---> Is branch test, release or production -----> |
												 |
												 |------>Production Environment

Plug-ins:-
---------
-> To have the extra functionality we are using plug-ins.


Plug-in Management in Jenkins:-
-----------------------------


	  |--Update-->Shows updates to plug-ins already installed
	  |--Available-->Shows plug-ins that are available for installation
Tabs------|--Installed-->Displays plug-ins installed that have no updates
	  |--Advanced-->Lists configuration of HTTP Proxy, allows manual upload of plug-ins and URL of plug-in site


->In real-time, we cannot install the plug-ins as simple as that reason being "there might be challenges with proxy settings as well as VPN". In order to avoid this, we should configure HTTP Proxy in Jenkins plug-ins of Advanced Tag.

-> How to Install Jenkins on Windows:-
  ----------------------------------
  ->Different ways of Installation:
    -------------------------------
->Using Docker, Kubernetes, war file and offline installations

Jenkins Website: Jenkins.io

Minimum hardware requirements:-
-----------------------------
-> 256MB of RAM
-> 1GB of drive space (although 10GB is a recommended minimum if running Jenkins as a Docker container)

Recommended hardware configuration for a small team:
----------------------------------------------------
-> 4GB of RAM
-> 50GB drive space

->Jenkins tool is developed on "Java" code.


Pre-requisites:-
--------------
-> Internet Connectivity
-> A system running windows 10
-> The latest copy of Java Development Kit (or) Java Runtime Environment installed.
-> Access to an account with administrator privileges.


->Install Jenkins on Windows:-
  --------------------------

-> Browse to download page on Jenkins. Under the downloading Jenkins section is a list of installers for the long-term support (LTS) version of Jenkins.
Click the windows link to begin the download.

-> URL : (Jenkins.io/download/)

-> Once after going, click on windows text under download Jenkins.

-> Once after downloading the Jenkins, go to download folder double click on Jenkins file which is in type of 'Windows Installer Package'.

-> The setup wizard starts, click Next to proceed.

-> Select the install destination folder and click Next to continue.

-> Under the Run service as a local or domain user option, enter the domain username and password for user account you want to run Jenkins with. Click Test credentials to verify the login data, then click Next to proceed.

-> Select first option which is Run service as local system.

-> Enter the port number you want Jenkins to run on. Click Test port to check if the selected port is available, then click Next to continue. (Keep default port number as "8080").

-> Select the directory where JAVA is installed on your system and click Next to proceed.

-> Click select the features you want to install with Jenkins and click Next to continue (Keep it as default settings)

-> Click Install to start the installation process.

-> After completing the installation process, you have to unblock Jenkins before you can customize and start using it.


----> Configuration:
      --------------
->In your web browser, navigate to port number you selected during the installation using the following address:-
	
		[http://localhost:[portnumber]]

	Eg: http://localhost:8080 (or) 127.0.0.1:8080

-> Navigate to the location on your system specified by the unblock Jenkins page.

-> Please copy the password from location-

	[C:\ProgramData\Jenkins\.jenkins\secret\initialAdminPassword] where initialAdminPassword is a file.

-> In order to read the data of that file use 'cat' command.

	[cat C:\ProgramData\Jenkins\.jenkins\secret\initialAdminPassword]

-> Copy the password from the initialAdminPassword file which is alphanumeric.

-> Paste the password in the Administrator password field on the unblock Jenkins page and click continue to proceed.

-> After clicking on continue, once you unlock Jenkins, customize and prepare the Jenkins environment.

-> Click the install suggested plug-ins button to have Jenkins automatically install the most frequently used plug-ins.

-> After Jenkins finishes installing the plug-ins, enter the required information on the Create First Admin User page. Click save and continue to proceed.

	[Create First Admin User--> Username--> Password--> Confirm Password--> Full name--> Email address--> Save and Continue]

->Then save and finish to finish the initial customization.


--> How to Stop Jenkins server on Windows:
    -------------------------------------
-> Go to the services in windows local system.
-> Search for J-(Jenkins)
-> Stop the server.

--> How to restart the Jenkins:-
    --------------------------
-> One way:- (safeRestart)
   -------  
-> Go to URL of the Jenkins and type (http://localhost:8080/safeRestart)

-> safeRestart:- Jenkins will try to pause jobs and restart once all running jobs are either finished or paused.

-> (Message page)-> Jenkins is restarting banner.

-> This will be displayed on most Jenkins pages, you can use it to let users know what is happening. A default message will be added if you don't supply one.



06/02/2025
----------

Plug-in Installation
--------------------:
 ->There are two ways to install Plug-ins:
   --------------------------------------
->Automatically   ->Manually

Automatically:
-------------
->Once we login to Jenkins GUI, left side you will see the option of manage Jenkins.

->Click on Manage Jenkins, in first tab there is system configuration under that we can see plug-ins.

->Click on plug-ins go to available plug-ins and search for the plug-in which is required.

->Select the plug-in under the list once you select the plug-in install button will be highlighted, then click on install button.

Manually:
--------
->Under plug-ins tab, go for available plug-ins and search for the plug-in, click on the plug-in which is required.

->Once you click on the plug-in new tab will be opened, then click on releases and under releases you can see various versions of the plug-ins.

->Go for the plug-ins which is required specific version.

->Click on 'direct link' in installation options, once you click on Direct link plug-in will get downloaded to our local machine.

->When we download plug-in in manual way again we need to deploy it to Jenkins.

->In Jenkins GUI plug-ins tab, Click on advanced settings.

->Choose the file to upload which is downloaded to local machine.


--> Plug-ins:-
    -------- 
-> It is about to add, remove, disable or enable plug-ins that can extend the functionality of Jenkins.

-> When we install plug-in in automatic way, plug-ins extension is .jpi (Jenkins Plug-in) when we install in automatic way.

-> When we install plug-in in manual way, plug-ins extension is hpi (Hudson plug-in).


-> How to uninstall the plug-ins:
   -----------------------------
  ->Manage Jenkins--> Plug-ins-->Installed plug-ins-->search plug-in and then uninstall button will be highlighted. Once clicked on uninstall, plug-in will get uninstalled.

-> How to Update the Plug-in:
   -------------------------
-> Manage Jenkins--> Plug-ins--> Updates

->Select the plug-in and then update button will be highlighted. Once clicked on update, plug-in will get updated.

->In real-time, we should not update the plug-ins directly. Reason being there may be challenges will be encountered.

->It will be recommended the plug-in to update in local machine where other team members will not get affected if anything goes wrong.


-> How to Create the Users in Jenkins:-
  ------------------------------------
  -> Login to admin console.
  -> Go to security, before that go to users (create/delete/modify users that can create Jenkins)
  ->Click on Users--> create user-->Credentials (custom)
  ->Username-->Password-->Confirm Password-->Full name--> Email Address-->Create

-> How to give permissions to the User:-
   -----------------------------------

-> Manage Jenkins--> Security (Secure Jenkins, define who is allowed to access/use the system)

-> In Authorization path, add user button, will be asked user ID give the User ID click on OK button.

-> Then give the required permission to the user by checking the box. (The minimum access to give is overall read).

-> By default whatever we create users for Jenkins will stored in "Jenkins own user database". This is suitable for smaller setup where you have no existing user database elsewhere.

-> The other option is "LDAP" (Light weight Directory Access Protocol)


-> Authorization Strategies:-
  --------------------------
->By default, we will be seeing "Project-based Matrix Authorization Strategy".

->With this we can the authorization, based on the option available under this strategy.
  Ex:- Overall, credentials, Agent, Job, Run, view etc.,

-> Matrix Authorization Strategy:-
   -----------------------------

  -> It allows configuring the lowest level permissions, such as starting new builds, configuring items, or deleting them individually.


-> Jenkins Project ( Project (or) Job):-
   ---------------- 
 -> It is a combination of one or more tasks.

1. Free Style Project:-
   -------------------
       -> Classic, generate purpose job type that checks out from up to one SCM, executes build steps serially, followed by post-build steps like archiving artifacts and sending email notifications.

2. Maven Project:
   --------------
       -> Build a maven project, Jenkins takes advantage of your POM files and drastically reduces the configuration.

3. Pipeline:
   --------
       -> Orchestrates long-running activities that can span multiple build agents, suitable for building pipelines (formerly known as workflows) and/or organizing complex activities that do not easily fit in free-style job type.

4. Multi-configuration project:
   ----------------------------
       -> Suitable for projects that need a large number of different configurations, such as testing on multiple environments, platform-specific builds, etc.,

5. Folder:
   ------
       -> Creates a container that stores nested items in it. Useful for grouping things together. Unlike view, which is just a filter, a folder creates a separate namespace, so you can have multiple things of the same name as long as they are in different folders.

6. Multibranch pipeline: 
   --------------------
       -> Creates a set of pipeline projects according to detected branches in one SCM repository.

7. Organization folder:
   -------------------
       -> Creates a set of multibranch project subfolders by scanning for repositories.


-> How to Create the Job (or) Project:
   -----------------------------------
  -> In Jenkins GUI, you can see in left pane side 'New item' click on it and "enter an item name".

  -> Then select an item type, once after selecting any item click on OK button.

  -> The job configuration is consist of General (where we can give information (or) description about the project), then in source code management where we will be passing URL's of the repositories, next to that build triggers (In what way we want to trigger (or) build that job).

  -> Build environment, build steps(where we can  add tasks), post-build actions.


-> How to create a free-style basic Job:
   -------------------------------------
  -> New item--> Give the Job name--> Select item type--> Go to the build steps (configuration of the job)--> add build step dropdown--> select execute windows batch command--> type dir --> Click on save

  -> Click on "Add build Step" dropdown button type 'dir'. Then Click on build now, you will get output then click on console output. 

Blue Ocean:
----------
-> Blue ocean rethinks the Jenkins user experience designed from the ground up for Jenkins pipeline and compatible with free-style jobs.



07/02/2025
----------

-> What if  Jenkins Administrator, there is a provision to reset the user credentials:
   -----------------------------------------------------------------------------------
path:
-----
Manage Jenkins--> Security--> Users--> Go to user which needs to be reset--> Click on security--> password(change)-->confirm password(change)--> Save

-> As a administrator, once you change the password again you need to inform user which is changed saying please follow below steps to change the password:
  -> Once login into the user GUI.
  -> Click on username in top right corner, go to security there you can change the password.

--> What if Jenkins administrator forgot the password:
    --------------------------------------------------





Jenkins Folder:
--------------
-> In Windows OS, we can see all the Jenkins information and configuration details under path [C:\ProgramData\Jenkins\.jenkins]

-> Under '.jenkins' folder, we can see users folder (where all the Jenkins user data is available)

-> Work space: Where all the configured secrets are available.

-> Plug-ins: All the plug-ins (which are installed manually and automatically) available.

-> Nodes: Where all the configured notes are available.

-> Logs: We can see slaves(if configured) and tasks where logs are available.

-> Apart from the above folders, there is Jenkins configurational file namely 'config.xml' (if at all changing the config.xml first take the backup of the original file)

-> We can also see the Jenkins logs in Jenkins GUI.

path: Manage Jenkins--> Status information--> System log--> All Jenkins logs

-> We can see the Jenkins version in the bottom right corner in Jenkins GUI and also
	path: Manage Jenkins--> Status information--> About Jenkins

Website of Cron tab:	[Crontab.guru]
-------------------      

-> It is used to schedule the jobs in Jenkins.


--> Ways to Trigger the Jenkins Jobs?
    ---------------------------------
Triggers: -> Setup automated actions that start your build based on specific events, like code changes or scheduled times.

1. Trigger build remotely (Eg: From scripts)
   ----------------------
-> In order to use this trigger, first we need to generate the authentication token of the job.
  	Eg: Enable this option if you would like to trigger new builds by accessing a special pre-defined URL (convenient for scripts)

-> You will need to provide an authorization token in the form of a string so that only those who know it would be able to remotely trigger this project's builds.

-> This is most useful when your Jenkins instance grants read access to this job to anonymous users.

-> When that's not the case, Jenkins will reject requests sent to the trigger URL even when the correct token is specified.

Eg:- Use the following URL to trigger build remotely:

	JENKINS_URL/job/ajafreestyle/build?token=TOKEN_NAME (or) /buildWithParameters?token=TOKEN_NAME

2. Build after other projects are built:  (Upstream and downstream jobs):
   ------------------------------------
-> Set up a trigger so that when some other projects finish building, a new build is scheduled for this project. This is convenient for running an extensive test after a build is complete, for example.

-> We need to pass the job name (which are configuration already) under 'project to watch' tab
 
       ->Trigger only if build is stable
       ->Trigger even if the build is unstable 
       ->Trigger even if the build fails 
       ->Always trigger, even if the build is aborted

3. Build periodically: (If Schedule):
   -------------------
-> This field follows the syntax of Cron (with minor differences) specifically, each line consist of 5 fields separated by TAB or whitespace:

-> MINUTE/ HOUR/ DOM/ MONTH/ DOW


   ->MINUTE  - Within the hour (0-59)
        -> HOUR    - The hour of the day (0-23)
        -> DOM     - The day of the month (1-31)
        -> MONTH   - The Month (1-12)
        -> DOW     - The day of the week for one field following operators are available in the order of precedence

-> For reference or practice, go with the website [crontab.guru]


4. GitHub hook trigger for Git SCM polling:
   ----------------------------------------
-> When Jenkins receives a GitHub push hook, GitHub Plugin checks to see whether the hook came from a GitHub repository which matches the Git repository defined in SCM/Git section of this job.

-> This option is available only when GitHub plug-ins is installed.

5. Poll SCM:
   ---------
-> Configure Jenkins to poll changes in SCM.

-> Apart from the above 5 trigger options, we can also trigger jobs manually. 




08/02/2025
----------

Job Configuration of build periodically trigger and poll SCM Trigger:
---------------------------------------------------------------------

->Create 'New item'

->Go to Triggers tab, check the box build periodically or poll SCM.

->Once clicked on checkbox scheduling comment box will open up. There we need to schedule as per requirement.

	Ex:- To schedule a job at every minute every hour on Saturday 8th February

	[* * * 8 2 6]

->Maintain one single letter gap between the inputs.
->Where first star means every minute 
->where second star means every hour
->where '8' is day of the month (February)
->where '2' is Month
->where '6' is day of the week (Saturday)
->Click on save and check for the jobs whether jobs are running as per the schedule or not.


-> Build after other projects are built:
   ------------------------------------
->Create more then one job then in triggers option select build after other projects are built.

->Once you checkbox the option need to pass projects to watch name. Then click on save and check.
	Ex: Job1, Job2, Job3
->For Job2 put the upstream project as Job1
->For Job3 put the upstream project as Job2

->When we build the Job1, once Job1 completed automatically downstream projects has to be build.

->For Job2, once select the build after projects build fails and then save.

->For Job1, if we do some mistake wantedly and check for all the jobs.



--> Pipeline Project:
    -----------------
-> We are going to pipeline projects in order to secure the CI-CD pipeline code by storing in any of the repositories.
	(Eg: GitHub, Gitlab, Bitbucket)

-> Sample helloworld pipeline script creation.

-> Click on new item select pipeline click on OK.

-> Go for pipeline option in configuration, where we can define or write the pipeline script.

-> We can write the script in script tag or else we can take it from SCM.

-> In the script tab, Click on drop-down option to try sample pipeline.

Syntax:
-------

			pipeline{
			agent any

			stages{
			stage('Hello'){
			steps{
			echo 'Hello world'
			}
		}
	}
}

-> Click on save

-> Make sure that stage view plug-in should be installed, so that we can do the changes.



--> Re-build vs Replay:-
    ------------------

  ->When we use re-build we are not changing anything, but whereas Replay gives us provision to change the code then and their.

->Replay we can also use it as one of the troubleshooting mechanisms.

->If we do  not know how to write pipeline script code, we can take the advantage of 'Snippet Generator' in pipeline syntax option. (will only visible when you create pipeline project or Job)

->This Snippet generator will help you learn the pipeline script code which can be used to define various steps. Pick a step you are interested in from the list, configure it, click Generate pipeline script, and you will see a pipeline script statement that would call the step with that configuration.

->You may copy and paste the whole statement into your script, or pickup just the options you care about.
	Eg: To print message: In sample step of snippet generator we can search for the echo.
	where is a step 'echo: Print message'

->Then what message we want to print, we have to pass it in message block.

->Then click on generate pipeline script which will give  us script to print message.

->By default, pipeline execution will work on serially (one by one). If the previous stage is passed then only it will go for next or further stages.



 





